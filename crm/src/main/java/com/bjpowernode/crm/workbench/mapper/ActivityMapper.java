package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int insert(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int updateByPrimaryKey(Activity record);

    /**
    * 保存创建的市场活动
    */
    int insertActivity(Activity activity);

    /**
    * 根据条件分页查询市场活动
    */
    List<Activity> selectActivityForPageByCondition(Map<String,Object> map);

    /**
    * 根据条件查询市场活动总条数
    */
    long selectCountOfActivityByCondition(Map<String,Object> map);

    /**
    * 根据id查询市场活动
    */
   Activity selectActivityById(String id);

    /**
    * 保存修改的市场活动
    */
        int updateActivity(Activity activity);

    /**
    * 根据ids批量删除市场活动
    */
    int deleteActivityByIds(String[] ids);

    /**
    * 查询所有的市场活动
    */

    /**
    * 根据ids查询市场活动
    */
    List<Activity> selectActivityByIds(String[] ids);

    /**
    * 批量保存创建的市场活动
    */


    /**
    * 进入详情页面
    */
   Activity selectActivityForDetailById(String id);

   //导入将excel中的多个市场活动导入到数据库市场活动表
    int insertActivityByList(List<Activity> activityList);


    /**
    * 根据name模糊查询市场活动
    */
    List<Activity> selectActivityForDetailByName(String name);

    //导出时要抓取市场活动表中所有数据
    List<Activity> selectActivityForDetailByIds(String[] ids);


    //在其它模块中需要市场模块的支持
    List<Activity> selectAllActivityForDetail();

    //根据clueId查询该线索相关的市场活动
    List<Activity> selectActivityForDetailByClueId(String clueId);

    //查询不属于该线索的市场活动
    List<Activity> selectActivityNoBoundById(Map<String,Object> map);

    //通过与线索关联的市场活动，取出对应


}